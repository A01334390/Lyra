"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t;
    return { next: verb(0), "throw": verb(1), "return": verb(2) };
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var errors_1 = require("./errors");
var locking_ledger_connection_1 = require("./locking-ledger-connection");
var signature_1 = require("./signature");
var LedgerEthereum = (function () {
    function LedgerEthereum(network, ledgerConnectionFactory, connectLedgerRequest, openEthereumAppRequest, switchLedgerModeRequest, enableContractSupportRequest) {
        var _this = this;
        // TODO: deal with timeouts
        this.getAddressByBip44Index = function (index) {
            if (index === void 0) { index = 0; }
            return __awaiter(_this, void 0, void 0, function () {
                var bip32Path;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            bip32Path = this.bip44IndexToBip32Path(index);
                            return [4 /*yield*/, this.getAddressByBip32Path(bip32Path)];
                        case 1: return [2 /*return*/, _a.sent()];
                    }
                });
            });
        };
        this.getAddressByBip32Path = function (path) { return __awaiter(_this, void 0, void 0, function () {
            var _this = this;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.lockingLedgerConnection.safelyCallEthereumApi(function (ledgerEthereumApi) { return __awaiter(_this, void 0, void 0, function () {
                            var _this = this;
                            return __generator(this, function (_a) {
                                switch (_a.label) {
                                    case 0: return [4 /*yield*/, this.callLedgerWithErrorHandling(ledgerEthereumApi, function (api) { return __awaiter(_this, void 0, void 0, function () {
                                            var publicKeyAndAddress;
                                            return __generator(this, function (_a) {
                                                switch (_a.label) {
                                                    case 0: return [4 /*yield*/, ledgerEthereumApi.getAddress_async(path)];
                                                    case 1:
                                                        publicKeyAndAddress = _a.sent();
                                                        return [2 /*return*/, publicKeyAndAddress.address];
                                                }
                                            });
                                        }); })];
                                    case 1: return [2 /*return*/, _a.sent()];
                                }
                            });
                        }); })];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        }); };
        this.signTransactionByBip44Index = function (hexEncodedTransaction, index) {
            if (index === void 0) { index = 0; }
            return __awaiter(_this, void 0, void 0, function () {
                var bip32Path;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0:
                            bip32Path = this.bip44IndexToBip32Path(index);
                            return [4 /*yield*/, this.signTransactionByBip32Path(hexEncodedTransaction, bip32Path)];
                        case 1: return [2 /*return*/, _a.sent()];
                    }
                });
            });
        };
        this.signTransactionByBip32Path = function (hexEncodedTransaction, path) {
            if (path === void 0) { path = _this.bip44IndexToBip32Path(0); }
            return __awaiter(_this, void 0, void 0, function () {
                var _this = this;
                return __generator(this, function (_a) {
                    switch (_a.label) {
                        case 0: return [4 /*yield*/, this.lockingLedgerConnection.safelyCallEthereumApi(function (ledgerEthereumApi) { return __awaiter(_this, void 0, void 0, function () {
                                var _this = this;
                                return __generator(this, function (_a) {
                                    switch (_a.label) {
                                        case 0: return [4 /*yield*/, this.callLedgerWithErrorHandling(ledgerEthereumApi, function (api) { return __awaiter(_this, void 0, void 0, function () {
                                                var signature;
                                                return __generator(this, function (_a) {
                                                    switch (_a.label) {
                                                        case 0: return [4 /*yield*/, ledgerEthereumApi.signTransaction_async(path, hexEncodedTransaction)];
                                                        case 1:
                                                            signature = _a.sent();
                                                            return [2 /*return*/, signature_1.Signature.fromSignature(signature)];
                                                    }
                                                });
                                            }); })];
                                        case 1: return [2 /*return*/, _a.sent()];
                                    }
                                });
                            }); })];
                        case 1: return [2 /*return*/, _a.sent()];
                    }
                });
            });
        };
        this.callLedgerWithErrorHandling = function (api, func) { return __awaiter(_this, void 0, void 0, function () {
            var error_1, betterError, betterError;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 21]);
                        return [4 /*yield*/, func(api)];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2:
                        error_1 = _a.sent();
                        if (!(error_1 === "No device found")) return [3 /*break*/, 5];
                        return [4 /*yield*/, this.connectLedgerRequest()];
                    case 3:
                        _a.sent();
                        return [4 /*yield*/, this.callLedgerWithErrorHandling(api, func)];
                    case 4: return [2 /*return*/, _a.sent()];
                    case 5:
                        if (!(error_1 === "Invalid status 6d00" || error_1 === "Invalid status 6700")) return [3 /*break*/, 8];
                        return [4 /*yield*/, this.openEthereumAppRequest()];
                    case 6:
                        _a.sent();
                        return [4 /*yield*/, this.callLedgerWithErrorHandling(api, func)];
                    case 7: return [2 /*return*/, _a.sent()];
                    case 8:
                        if (!(error_1 === "Invalid channel;")) return [3 /*break*/, 11];
                        return [4 /*yield*/, this.switchLedgerModeRequest()];
                    case 9:
                        _a.sent();
                        return [4 /*yield*/, this.callLedgerWithErrorHandling(api, func)];
                    case 10: return [2 /*return*/, _a.sent()];
                    case 11:
                        if (!(error_1 === "Invalid status 6a80")) return [3 /*break*/, 14];
                        return [4 /*yield*/, this.enableContractSupportRequest()];
                    case 12:
                        _a.sent();
                        return [4 /*yield*/, this.callLedgerWithErrorHandling(api, func)];
                    case 13: return [2 /*return*/, _a.sent()];
                    case 14:
                        if (!(error_1 === "Invalid status 6804")) return [3 /*break*/, 15];
                        throw new errors_1.ErrorWithCode("Security Exception.  This likely means you provided an invalid BIP32 path.  Do you have hardening in the right places?", errors_1.ErrorCode.BadRequest);
                    case 15:
                        if (!(error_1 && error_1.errorCode === 2)) return [3 /*break*/, 16];
                        betterError = new errors_1.ErrorWithCode("Bad Request.  This likely means you are trying to use u2f from a webpage served by HTTP (instead of HTTPS).", errors_1.ErrorCode.BadRequest);
                        betterError.stack = error_1.stack;
                        throw betterError;
                    case 16:
                        if (!(error_1 && error_1.errorCode === 5)) return [3 /*break*/, 19];
                        return [4 /*yield*/, this.connectLedgerRequest()];
                    case 17:
                        _a.sent();
                        return [4 /*yield*/, this.callLedgerWithErrorHandling(api, func)];
                    case 18: return [2 /*return*/, _a.sent()];
                    case 19:
                        if (error_1 instanceof Error && error_1.message === "Invalid hex string") {
                            betterError = new errors_1.ErrorWithCode("Invalid input", errors_1.ErrorCode.InvalidInput);
                            betterError.stack = error_1.stack;
                            throw betterError;
                        }
                        else {
                            throw new errors_1.WrappedError("Unknown error from ledger (see data).", error_1);
                        }
                        _a.label = 20;
                    case 20: return [3 /*break*/, 21];
                    case 21: return [2 /*return*/];
                }
            });
        }); };
        this.bip44IndexToBip32Path = function (index) { return "m/44'/" + _this.network + "'/0'/0/" + index; };
        this.network = network;
        this.lockingLedgerConnection = new locking_ledger_connection_1.LockingLedgerConnection(ledgerConnectionFactory);
        this.connectLedgerRequest = connectLedgerRequest;
        this.openEthereumAppRequest = openEthereumAppRequest;
        this.switchLedgerModeRequest = switchLedgerModeRequest;
        this.enableContractSupportRequest = enableContractSupportRequest;
    }
    return LedgerEthereum;
}());
exports.LedgerEthereum = LedgerEthereum;
//# sourceMappingURL=ledger-ethereum.js.map