import { LedgerConnectionFactory } from "./connection-factories";
import { Network } from "./network";
import { Signature } from "./signature";
export declare class LedgerEthereum {
    private network;
    private connectLedgerRequest;
    private openEthereumAppRequest;
    private switchLedgerModeRequest;
    private enableContractSupportRequest;
    private lockingLedgerConnection;
    constructor(network: Network, ledgerConnectionFactory: LedgerConnectionFactory, connectLedgerRequest: () => Promise<void>, openEthereumAppRequest: () => Promise<void>, switchLedgerModeRequest: () => Promise<void>, enableContractSupportRequest: () => Promise<void>);
    getAddressByBip44Index: (index?: number) => Promise<string>;
    getAddressByBip32Path: (path: string) => Promise<string>;
    signTransactionByBip44Index: (hexEncodedTransaction: string, index?: number) => Promise<Signature>;
    signTransactionByBip32Path: (hexEncodedTransaction: string, path?: string) => Promise<Signature>;
    private callLedgerWithErrorHandling;
    private bip44IndexToBip32Path;
}
